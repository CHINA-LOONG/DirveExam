#  windows platform

platform :windows do
    ###########################################
    #
    before_all do
        @platform = :StandaloneWindows64
    end
    ##########################################################
    #
    lane :info do |options|
        UI.important "options: #{options}"
        print_info
    end
    ##########################################################
    #
    desc 'GenerateGameVersion from svn version'
    lane :update_version do |options|
        do_update_version(options)
    end
    ##########################################################
    #
    desc 'Generate Game Resources'
    lane :generate_asset do |options|
        do_generate_asset(options)
    end
    ##########################################################
    #
    lane :upload_assets do |options|
        do_upload_assets(options)
    end
    ##########################################################
    #
    lane :teamcity_export_parameter do
        teamcity_export_parameter
    end
    #############################################
    #
    lane :teamcity_artifacts do
        artifacts = [
            "AssetBundles/#{@platform} => AssetBundles/#{@platform}",
            # "AssetBundles/Output/#{@platform} => AssetBundles/Output/#{@platform}",
            "Config/#{@platform}/#{build_number} => Config/#{@platform}/#{build_number}"
        ]
        artifacts.each { |x| sh("echo \"##teamcity[publishArtifacts '#{x}']\"") }
    end
    ##########################################################
    #
    desc 'build for develop'
    lane :beta do |options|
        options[:version] = options[:version] || :Skip
        options[:collection] = options[:collection] || :GenerateSystem
        options[:streaming] = options[:streaming] || :StreamingSystem

        info(options)
        update_version(options)
        generate_asset(options)
        copy_asset(options)
    end
    ##########################################################
    #
    desc 'lane for teamcity'
    lane :teamcity do |options|
        options[:collection] = options[:collection] || :GenerateAll
        options[:version] = options[:version] || :Commit

        info(options)
        next if update_version(options) == :VersionChanged
        generate_asset(options)
        teamcity_export_parameter
        upload_assets(options)
        teamcity_artifacts
        do_cleanup(options)
    end
    ##########################################################
    #
    after_all do |lane|
        # This block is called, only if the executed lane was successful

        # slack(
        #   message: "Successfully deployed new App Update."
        # )
    end
    ##########################################################
    #
    error do |_lane, exception|
        puts "[#{product_name}] build #{@platform} failed: #{exception.message}"
    end
end
