# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane


default_platform :ios


desc "Description of what the lane does"
lane:do_set_package_setting do |options|

end


private_lane :do_update_version do |options|
    version = (options[:version] || :Generate).to_sym
    next if version == :Skip

    method = version == :Commit ? 'GenerateGameVersionAndComit' : 'GenerateGameVersion'
    unity_tee = (options[:unity_tee] || :False).to_sym == :True

    saved = build_version
    UI.important "saved build_version: #{saved}"

    unity(
        execute_method: "Plugins.Editor.BuildPackage.CommandLineBuild.#{method}",
        project_path: project_path,
        use_tee: unity_tee,
        logfile: temp_path('Unity.GenerateGameVersion.log')
    )

    sh("
        mkdir -p #{build_path}
        mv #{temp_path('Unity.GenerateGameVersion.log')} #{log_path(method)}
    ")

    UI.important "current build_version: #{build_version}"
    UI.important "build_version #{saved} changed to: #{build_version}" if saved != build_version

    :VersionChanged if saved != build_version
ensure
    teamcity_artifact(temp_path('Unity.GenerateGameVersion.log'))
    teamcity_artifact(log_path(method))
end



#############################################
#
def teamcity_artifact(path)
    path.sub! "#{project_path}/", ''
    sh("echo \"##teamcity[publishArtifacts '#{path}']\"")
end

#############################################
#
def project_path
    %x(dirname `pwd` | xargs dirname).strip
end

def temp_path(name)
	"#{project_path}/Build/Output/#{@platform}/#{name}"
end

def log_path(name)
    "#{build_path}/Unity.Build#{@platform}-#{build_version}-#{name}.log"
end


def bundle_version
	#"1001".strip
	`find ./../../Assets -name GameVersion.cs\\
	-exec grep "BundleVersion = .*;" {} \\; | awk -F'\"' '{printf $2}'`.strip
end

def build_number
	#"2556 ".strip
	`find ./../../Assets -name GameVersion.cs\\
	-exec grep "BuildNumber = .*;" {} \\; | awk -F'\"' '{printf $2}'`.strip
end

def build_version
	"#{bundle_version}.#{build_number}"
end

def product_name
    `grep productName ../../ProjectSettings/ProjectSettings.asset\\
    | awk '{print $2}'`.strip
end

def export_path
    case @platform
    when :iOS
        xcodeproj_path
    when :Android
        gradle_path
    else
        UI.error "export_path: Platform #{@platform} not support."
        ''
    end
end

def gradle_path
    "#{build_path}/#{product_name}"
end

def xcodeproj_path
    "#{build_path}/Unity-iPhone.xcodeproj"
end

def build_path
    # UI.message "build_path: Platform #{@platform}."
    case @platform
    when :IOS
        "#{project_path}/Build/Output/#{@platform}/Build-#{build_version}/#{product_name}"
    when :Android, :StandaloneOSX, :StandaloneWindows64
        "#{project_path}/Build/Output/#{@platform}/Build-#{build_version}"
    else
        UI.error "build_path: Platform #{@platform} not support."
        ''
    end
end

def app_identifier
    # UI.message "app_identifier: Platform #{@platform}."
    case @platform
    when :iOS
        ENV['IOS_IDENTIFIER']
    when :Android
        ENV['ANDROID_IDENTIFIER']
    else
        UI.error "app_identifier: Platform #{@platform} not support."
        ''
    end
end

def ipa_name
    "#{app_identifier}-#{build_version}.ipa"
end

def ipa_path
    "#{build_path}/#{ipa_name}"
end

def dSYM_name
    "#{app_identifier}-#{build_version}.app.dSYM.zip"
end

def dSYM_path
    "#{build_path}/#{dSYM_name}"
end

def apk_name
    "#{product_name}-release.apk"
end

def apk_path
    "#{gradle_path}/build/outputs/apk/release/#{apk_name}"
end

# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Output.md
# All available actions: https://docs.fastlane.tools/actions

# fastlane reports which actions are used. No personal data is recorded.
# Learn more at https://github.com/fastlane/fastlane#metrics
#

def print_info
	params = Hash[
		:working,`pwd`.strip,
		:setting_file,ENV['SETTING_FILE']
	]

	###### print params list###################################
	UI.message "\n#{Terminal::Table.new(
		title: 'Build info'.green,
		headings: %w[Option Value],
		rows: FastlaneCore::PrintTable.transform_output(params)
	)}"

	print_help
end

def print_help
    UI.message '
    options:
        version:        Generate, Commit, Skip
        collection:     GenerateAll, GenerateSystem, Skip
        streaming:      StreamingAll, StreamingSystem, Skip
        export:         Skip
        icon:           Skip
        upload:         Skip
        cleanup:        n, Skip
        unity_symbols:  Debug, Release, Skip
        gradle_build:   Debug, Release, Skip
        unity_tee:      True, False
        match:          AdHoc, AppStore, Skip
        testflight_waiting:     True, False

        for examples:
            fastlane ios beta version:Skip collection:Skip streaming:Skip unity_symbols:Skip
            fastlane android deploy
    '
end

import './FastfileIOS'
import './FastfileAndroid'
import './FastfileMac'
import './FastfileWindows'